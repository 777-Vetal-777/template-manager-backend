currentBuild.description = "${params.BRANCH}"
pipeline {
    options {
        buildDiscarder(
            logRotator(
                artifactDaysToKeepStr: "",
                artifactNumToKeepStr: "",
                daysToKeepStr: "",
                numToKeepStr: "5"
            )
        )
        disableConcurrentBuilds()
    }
    environment{
        projectName = "dtm-backend"
        registryHost = "https://nexus-docker.andersenlab.dev"
        registryCredentials = "nexus_andersen"
        hostIP="10.10.15.109"
        WORKING_ENV = "stage"
        dockerCredentials="docker-stage-itext"
        SCM_URL="https://git.itextsupport.com/scm/dito/template-manager-backend.git"
    }
    agent{
        label "master"
    }
    stages { 
        stage("Build docker image"){
            steps{
                script {
                  dockerImage = docker.build("${projectName}-${WORKING_ENV}:${BUILD_NUMBER}", "-f ${WORKSPACE}/devops/Dockerfile ./" )
                  sh "docker run -v ${WORKSPACE}:/opt/mount --rm --entrypoint cp $${projectName}-${WORKING_ENV}:${BUILD_NUMBER} template-manager.jar /opt/mount/"   
                }
            }
        }
        stage('Sonarqube analysis') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube_8.3') {                        
                        sh 'mvn sonar:sonar -Dsonar.projectKey=${projectName}-${WORKING_ENV} -Dsonar.projectName=${projectName}-${WORKING_ENV} -Dsonar.projectVersion=1.0 -Dsonar.java.binaries=${WORKSPACE}/src/main -Dsonar.java.test.binaries=${WORKSPACE}/src/test'
                    }
                }
            }
        }
        stage("Deploy image to nexus"){
            steps{
                script{
                    docker.withRegistry(registryHost, registryCredentials){
                        dockerImage.push()
                    }
                }
            }
        }
        stage("Remove unused docker image"){
            steps{
                sh '''docker rmi -f $(docker images --filter=reference=${projectName} -q) >/dev/null 2>&1''' 
            }
        }
        stage("Deploy docker image to host"){
            steps{
                script{
                    docker.withServer("tcp://${hostIP}:2376",dockerCredentials){
                        docker.withRegistry(registryHost,registryCredentials){
                            sh """
                            echo 'docker image ${registryHost}/${projectName}-${WORKING_ENV}:${BUILD_NUMBER}'
                            docker-compose --file ${WORKSPACE}/devops/docker-compose.yml up --force-recreate -d
                            docker image prune -f
                            """
                        }
                    }
                }
            }
        }
    }
            post {
        always {
            cleanWs()
        }
    }
}